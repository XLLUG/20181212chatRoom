#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('20181212chartroom:server');
var http = require('http');
var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socket(server);
var sockets = {};
var userList = [];
io.on('connection', function (socket) {
    console.log("在默认的命名空间：客户端连接建立成功");
    socket.on('message', function (msg) {
        socket.send(msg + 'too');
    });
    //当服务器端和客户端的连接断开时触发disconnect事件.
    socket.on("disconnect", function () {
        for (var i = 0; i < userList.length; i++) {
            if (userList[i].username == socket.name) {
                userList.splice(i, 1);
            }
        }
        socket.broadcast.emit('userRemoved', {
            name: socket.name,
            userList:userList
        });

//删除对应的socket实例
        delete sockets[socket.name];
        console.log("客户端断开连接.");
    });
    socket.on('user', function (msg) {
        socket.name = msg.username;
        sockets[msg.username] = socket;
        console.log(userList);
        if (JSON.stringify(userList).indexOf(JSON.stringify(msg)) == -1) {
            userList.push(msg)
        }
        io.emit('loginUser', userList);
    });
    socket.on('clientMessage', function (msg) {
        var mg = {username: socket.name, info: msg, time: Date.now()}
        io.emit('message', mg)
    })
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
